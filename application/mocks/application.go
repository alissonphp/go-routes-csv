// Code generated by MockGen. DO NOT EDIT.
// Source: application/route.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	application "go-best-route/application"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRouteInterface is a mock of RouteInterface interface.
type MockRouteInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRouteInterfaceMockRecorder
}

// MockRouteInterfaceMockRecorder is the mock recorder for MockRouteInterface.
type MockRouteInterfaceMockRecorder struct {
	mock *MockRouteInterface
}

// NewMockRouteInterface creates a new mock instance.
func NewMockRouteInterface(ctrl *gomock.Controller) *MockRouteInterface {
	mock := &MockRouteInterface{ctrl: ctrl}
	mock.recorder = &MockRouteInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteInterface) EXPECT() *MockRouteInterfaceMockRecorder {
	return m.recorder
}

// GetFrom mocks base method.
func (m *MockRouteInterface) GetFrom() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrom")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFrom indicates an expected call of GetFrom.
func (mr *MockRouteInterfaceMockRecorder) GetFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrom", reflect.TypeOf((*MockRouteInterface)(nil).GetFrom))
}

// GetPrice mocks base method.
func (m *MockRouteInterface) GetPrice() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockRouteInterfaceMockRecorder) GetPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockRouteInterface)(nil).GetPrice))
}

// GetTo mocks base method.
func (m *MockRouteInterface) GetTo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTo")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTo indicates an expected call of GetTo.
func (mr *MockRouteInterfaceMockRecorder) GetTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTo", reflect.TypeOf((*MockRouteInterface)(nil).GetTo))
}

// MockRouteServiceInterface is a mock of RouteServiceInterface interface.
type MockRouteServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRouteServiceInterfaceMockRecorder
}

// MockRouteServiceInterfaceMockRecorder is the mock recorder for MockRouteServiceInterface.
type MockRouteServiceInterfaceMockRecorder struct {
	mock *MockRouteServiceInterface
}

// NewMockRouteServiceInterface creates a new mock instance.
func NewMockRouteServiceInterface(ctrl *gomock.Controller) *MockRouteServiceInterface {
	mock := &MockRouteServiceInterface{ctrl: ctrl}
	mock.recorder = &MockRouteServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteServiceInterface) EXPECT() *MockRouteServiceInterfaceMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockRouteServiceInterface) Save(from, to string, price int) (application.RouteInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", from, to, price)
	ret0, _ := ret[0].(application.RouteInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockRouteServiceInterfaceMockRecorder) Save(from, to, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRouteServiceInterface)(nil).Save), from, to, price)
}

// SearchBest mocks base method.
func (m *MockRouteServiceInterface) SearchBest(from, to string) (application.BestRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBest", from, to)
	ret0, _ := ret[0].(application.BestRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBest indicates an expected call of SearchBest.
func (mr *MockRouteServiceInterfaceMockRecorder) SearchBest(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBest", reflect.TypeOf((*MockRouteServiceInterface)(nil).SearchBest), from, to)
}

// MockRouteReader is a mock of RouteReader interface.
type MockRouteReader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteReaderMockRecorder
}

// MockRouteReaderMockRecorder is the mock recorder for MockRouteReader.
type MockRouteReaderMockRecorder struct {
	mock *MockRouteReader
}

// NewMockRouteReader creates a new mock instance.
func NewMockRouteReader(ctrl *gomock.Controller) *MockRouteReader {
	mock := &MockRouteReader{ctrl: ctrl}
	mock.recorder = &MockRouteReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteReader) EXPECT() *MockRouteReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRouteReader) Get(from, to string) (application.RouteInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", from, to)
	ret0, _ := ret[0].(application.RouteInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRouteReaderMockRecorder) Get(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouteReader)(nil).Get), from, to)
}

// List mocks base method.
func (m *MockRouteReader) List() ([]application.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]application.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRouteReaderMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRouteReader)(nil).List))
}

// MockRouteWriter is a mock of RouteWriter interface.
type MockRouteWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteWriterMockRecorder
}

// MockRouteWriterMockRecorder is the mock recorder for MockRouteWriter.
type MockRouteWriterMockRecorder struct {
	mock *MockRouteWriter
}

// NewMockRouteWriter creates a new mock instance.
func NewMockRouteWriter(ctrl *gomock.Controller) *MockRouteWriter {
	mock := &MockRouteWriter{ctrl: ctrl}
	mock.recorder = &MockRouteWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteWriter) EXPECT() *MockRouteWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockRouteWriter) Save(route application.RouteInterface) (application.RouteInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", route)
	ret0, _ := ret[0].(application.RouteInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockRouteWriterMockRecorder) Save(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRouteWriter)(nil).Save), route)
}

// MockRoutePersistenceInterface is a mock of RoutePersistenceInterface interface.
type MockRoutePersistenceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoutePersistenceInterfaceMockRecorder
}

// MockRoutePersistenceInterfaceMockRecorder is the mock recorder for MockRoutePersistenceInterface.
type MockRoutePersistenceInterfaceMockRecorder struct {
	mock *MockRoutePersistenceInterface
}

// NewMockRoutePersistenceInterface creates a new mock instance.
func NewMockRoutePersistenceInterface(ctrl *gomock.Controller) *MockRoutePersistenceInterface {
	mock := &MockRoutePersistenceInterface{ctrl: ctrl}
	mock.recorder = &MockRoutePersistenceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutePersistenceInterface) EXPECT() *MockRoutePersistenceInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRoutePersistenceInterface) Get(from, to string) (application.RouteInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", from, to)
	ret0, _ := ret[0].(application.RouteInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoutePersistenceInterfaceMockRecorder) Get(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoutePersistenceInterface)(nil).Get), from, to)
}

// List mocks base method.
func (m *MockRoutePersistenceInterface) List() ([]application.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]application.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoutePersistenceInterfaceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoutePersistenceInterface)(nil).List))
}

// Save mocks base method.
func (m *MockRoutePersistenceInterface) Save(route application.RouteInterface) (application.RouteInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", route)
	ret0, _ := ret[0].(application.RouteInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockRoutePersistenceInterfaceMockRecorder) Save(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRoutePersistenceInterface)(nil).Save), route)
}
